{"version":3,"sources":["kit/shared/img/preview-image.jpg","kit/components/card-item/index.tsx","kit/components/select/styles.ts","kit/components/select/index.tsx","kit/components/multi-range-slider/styledItems.tsx","redux/Products/types.ts","kit/components/multi-range-slider/index.tsx","kit/components/sidebar-section/index.tsx","kit/components/button/index.tsx","redux/Products/actions.ts","redux/Products/reducers.ts","redux/Products/selectors.ts","constants/api.ts","redux/Cities/types.ts","redux/Products/thunks.ts","utils/filterArray.ts","redux/Cities/actions.ts","redux/Cities/reducers.ts","redux/Cities/selectors.ts","redux/Categories/types.ts","redux/Cities/thunks.ts","redux/Categories/actions.ts","redux/Categories/reducers.ts","redux/Categories/selectors.ts","redux/Filters/types.ts","redux/Categories/thunks.ts","redux/Filters/actions.ts","redux/Filters/reducers.ts","redux/Filters/selectors.ts","redux/Filters/thunks.ts","utils/transformValueToOptionValue.ts","kit/shared/icons/check-icon.svg","kit/components/checkbox/styledCheckbox.tsx","kit/components/checkbox/index.tsx","redux/configureStore.ts","kit/components/category-list/index.tsx","kit/shared/icons/sad-icon.svg","kit/components/no-data-found/index.tsx","app/App.tsx","index.tsx"],"names":["CardItem","props","city","title","category","price","className","width","height","src","PreviewImage","alt","CUSTOM_SELECT_STYLES","indicatorSeparator","styles","display","dropdownIndicator","color","control","state","minHeight","borderColor","isFocused","borderRadius","boxShadow","valueContainer","fontFamily","singleValue","CustomSelect","onChange","options","value","placeholder","e","EProductsActionTypes","ThumbLeft","styled","span","left","ThumbRight","right","Range","MultiRangeSlider","minValue","maxValue","currentRange","useState","min","inputLeftValue","setInputLeftValue","max","inputRightValue","setInputRightValue","getComputedThumbPosition","inputLeftValueInPercentage","setInputLeftValueInPercentage","inputRightValueInPercentage","setInputRightValueInPercentage","useEffect","val","newValue","newPosition","type","leftValue","Math","Number","target","leftThumbPosition","rightValue","rightThumbPosition","SidebarSection","children","sectionClassNames","classNames","Button","onClick","buttonClassNames","productsTypes","PRODUCTS_REQUEST","data","PRODUCTS_RECEIVE","payload","err","PRODUCTS_FAILURE","PRODUCTS_FILTER","initialState","loading","products","filteredProducts","error","Products","loadingProducts","ECitiesActionTypes","MAIN_API","dispatch","a","actions","fetch","res","json","parsedData","setTimeout","message","filters","getState","array","filterKeys","Object","keys","filter","item","every","key","filterArray","citiesTypes","CITIES_REQUEST","CITIES_RECEIVE","CITIES_FAILURE","cities","ECategoriesActionTypes","Cities","loadingCities","categoriesTypes","CATEGORIES_REQUEST","CATEGORIES_RECEIVE","CATEGORIES_FAILURE","categories","EVisibilityFilterActionTypes","Categories","loadingCategories","visibilityFilterTypes","CITY_FILTER_CHANGE","CATEGORY_FILTER_CHANGE","PRICE_FILTER_CHANGE","FILTER_CLEAR","selectedCity","VisibilityFilter","selectedPriceRange","selectedCategories","option","selectedOption","id","name","label","newSetOfSelectedCategories","Set","has","delete","Array","from","add","transformValueToOptionValue","StyledCheckbox","isChecked","checkIcon","Checkbox","numberValue","checked","htmlFor","useTypedSelector","useSelector","persistConfig","storage","reducers","combineReducers","action","PRODUCTS_CLEAR","CITIES_CLEAR","CATEGORIES_CLEAR","middlewareEnhancer","applyMiddleware","thunk","composedEnhancer","compose","persistedReducer","persistReducer","store","createStore","composeWithDevTools","persistor","persistStore","CategoryList","categoriesState","categoriesSelector","productsState","productsSelector","visibilityFilterState","visibilityFilterSelector","onChangeCategoryFilter","visibilityFilterOperations","useDispatch","length","map","idx","toString","includes","product","NoDataFound","sadIcon","App","citiesState","citiesSelector","fetchProducts","productsOperations","filterProducts","resetFilterProducts","fetchCities","citiesOperations","fetchCategories","categoriesOperations","onChangeCityFilter","onChangePriceFilter","clearVisibilityFilter","availablePrices","defaultPriceRange","currentMinPrice","currentMaxPrice","findCategoryById","find","findCityById","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a99644f0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preview-image.1846cd6d.jpg\";","import React from 'react'\nimport PreviewImage from './../../shared/img/preview-image.jpg'\n\nimport './index.scss'\n\ninterface CardItemProps {\n  city: string\n  title: string\n  category: string\n  price: number\n}\n\nconst CardItem: React.FC<CardItemProps> = (props: CardItemProps) => {\n  const {\n    city,\n    title,\n    category,\n    price\n  } = props\n  return (\n    <div className=\"card-item\">\n      <div className=\"image-wrap\">\n        <span className=\"overlay\" />\n        <img width=\"270\" height=\"180\" src={PreviewImage} alt=\"Preview-image\" className=\"card-item__image\" />\n      </div>\n      <h3 className=\"card-item__city\">\n        {city}\n      </h3>\n      <h2 className=\"card-item__title\">\n        {title}\n      </h2>\n      <div className=\"info\">\n        <span className=\"card-item__category\">\n          {category}\n        </span>\n        <span className=\"card-item__price\">\n          ${price}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nexport default CardItem\n","import {CSSProperties} from \"react\";\nimport {ControlProps} from \"react-select\";\nimport {OptionTypeBase} from \"react-select/src/types\";\nimport {StylesConfig} from \"react-select/src/styles\";\n\nexport const CUSTOM_SELECT_STYLES: StylesConfig<any, boolean> = {\n  indicatorSeparator: (styles: CSSProperties) => ({\n    ...styles,\n    display: 'none'\n  }),\n  dropdownIndicator: (styles: CSSProperties) => ({\n    ...styles,\n    color: \"#33363e\",\n    ':hover': {\n      color: 'inherit'\n    }\n  }),\n  control: (styles: CSSProperties, state: ControlProps<OptionTypeBase, boolean>) => ({\n    ...styles,\n    width: \"240px\",\n    minHeight: \"42px\",\n    borderColor: state.isFocused ? \"hsl(0,0%,70%)\" : \"#dee0e1\",\n    borderRadius: '0',\n    boxShadow: 'unset'\n  }),\n  valueContainer: (styles: CSSProperties) => ({\n    ...styles,\n    fontFamily: \"inherit\"\n  }),\n  singleValue: (styles: CSSProperties) => ({\n    ...styles,\n    color: \"#4c505b\"\n  })\n}","import React from 'react'\nimport Select, {OptionsType, ValueType} from 'react-select'\nimport {CUSTOM_SELECT_STYLES} from \"./styles\";\n\nexport interface OptionValues {\n  value: number\n  label: string\n}\n\ninterface CustomSelectProps {\n  onChange: (elem: OptionValues) => void\n  options: OptionsType<OptionValues>,\n  value: ValueType<OptionValues, boolean> | null\n}\n\nconst CustomSelect: React.FC<CustomSelectProps> = (props: CustomSelectProps) => {\n  const {\n    onChange,\n    options,\n    value\n  } = props\n\n  const handleChange = (e: ValueType<OptionValues, boolean>) => {\n    onChange(e as OptionValues)\n  }\n\n  return (\n    <Select\n      value={value}\n      placeholder=\"Choose a city\"\n      styles={CUSTOM_SELECT_STYLES}\n      options={options}\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default CustomSelect","import styled from \"styled-components\";\n\nconst ThumbLeft = styled.span<{left: string}>`\n  left: ${props => props.left};\n`\n\nconst ThumbRight = styled.span<{right: string}>`\n  right: ${props => props.right};\n`\n\nconst Range = styled.span<{left: string, right: string}>`\n  left: ${props => props.left};\n  right: ${props => props.right};\n`\n\nexport {\n  ThumbLeft,\n  ThumbRight,\n  Range\n}","export enum EProductsActionTypes {\n  PRODUCTS_REQUEST = 'PRODUCTS_REQUEST',\n  PRODUCTS_RECEIVE = 'PRODUCTS_RECEIVE',\n  PRODUCTS_FILTER = 'PRODUCTS_FILTER',\n  PRODUCTS_FAILURE = 'PRODUCTS_FAILURE',\n  PRODUCTS_CLEAR = 'PRODUCTS_CLEAR'\n}","import React, {ChangeEvent, useEffect, useState} from 'react'\nimport { ThumbLeft, ThumbRight, Range } from './styledItems'\n\nimport './index.scss'\n\ninterface MultiRangeSliderProps {\n  minValue?: number\n  maxValue?: number\n  onChange: (currentMinValue: number, currentMaxValue: number) => void\n  currentRange: {min: number, max: number}\n}\n\nconst MultiRangeSlider: React.FC<MultiRangeSliderProps> = (props: MultiRangeSliderProps) => {\n  const {\n    onChange,\n    minValue = 0,\n    maxValue = 200,\n    currentRange\n  } = props\n\n  const [inputLeftValue, setInputLeftValue] = useState(currentRange.min)\n  const [inputRightValue, setInputRightValue] = useState(currentRange.max)\n  const [inputLeftValueInPercentage, setInputLeftValueInPercentage] = useState(getComputedThumbPosition(currentRange.min)['left'])\n  const [inputRightValueInPercentage, setInputRightValueInPercentage] = useState(getComputedThumbPosition(currentRange.max)['right'])\n\n  useEffect(() => {\n    onChange(inputLeftValue, inputRightValue)\n  }, [inputLeftValue, inputRightValue])\n\n  useEffect(() => {\n    setInputLeftValue(currentRange.min)\n    setInputRightValue(currentRange.max)\n\n    setInputLeftValueInPercentage(getComputedThumbPosition(currentRange.min)['left'])\n    setInputRightValueInPercentage(getComputedThumbPosition(currentRange.max)['right'])\n  }, [currentRange])\n\n  const handleChangeLeftValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const leftValue = Math.min(Number(e.target.value), inputRightValue - 1)\n    const leftThumbPosition = getComputedThumbPosition(leftValue)['left']\n    setInputLeftValue(leftValue)\n    setInputLeftValueInPercentage(leftThumbPosition)\n  }\n\n  const handleChangeRightValue = (e: ChangeEvent<HTMLInputElement>) => {\n    const rightValue = Math.max(Number(e.target.value), inputLeftValue + 1)\n    const rightThumbPosition = getComputedThumbPosition(rightValue)['right']\n    setInputRightValue(rightValue)\n    setInputRightValueInPercentage(rightThumbPosition)\n  }\n\n  function getComputedThumbPosition(val: number) {\n    const newValue = ((val - minValue) * 100 / (maxValue - minValue))\n    const newPosition = 16 - (newValue * 0.2)\n\n    return {\n      left: `calc(${newValue}% + ${newPosition}px)`,\n      right: `calc(100% - (${newValue}% + ${newPosition}px))`\n    }\n  }\n\n  return (\n    <div className=\"range-slider-wrap\">\n      <div className=\"multi-range-slider\">\n        <input\n          type=\"range\"\n          min={minValue}\n          max={maxValue}\n          value={inputLeftValue}\n          onChange={handleChangeLeftValue}\n        />\n        <input\n          type=\"range\"\n          min={minValue}\n          max={maxValue}\n          value={inputRightValue}\n          onChange={handleChangeRightValue}\n        />\n        <div className=\"slider\">\n          <div className=\"track\"/>\n          <Range\n            left={inputLeftValueInPercentage}\n            right={inputRightValueInPercentage}\n            className=\"range\"\n          />\n          <ThumbLeft left={inputLeftValueInPercentage} className=\"thumb left\" />\n          <ThumbRight right={inputRightValueInPercentage} className=\"thumb right\" />\n        </div>\n      </div>\n      <span className=\"range-price\">\n        <span className=\"range-price__left\">${inputLeftValue}</span>\n        <span className=\"range-price__divider\">-</span>\n        <span className=\"range-price__left\">${inputRightValue}</span>\n      </span>\n    </div>\n  )\n}\n\nexport default MultiRangeSlider\n","import React from 'react'\nimport classNames from \"classnames\";\n\nimport './index.scss'\n\ninterface SidebarSectionProps {\n  title: string\n  children: React.ReactNode\n  className?: string\n}\n\nconst SidebarSection: React.FC<SidebarSectionProps> = (props: SidebarSectionProps) => {\n  const {\n    title,\n    className,\n    children\n  } = props\n\n  const sectionClassNames = classNames(\n    \"sidebar-section\",\n    {\n      [`${className}`]: className\n    }\n  )\n\n  return (\n    <section className={sectionClassNames}>\n      <h2 className=\"sidebar-section__title\">\n        {title}\n      </h2>\n      {children}\n    </section>\n  )\n}\n\nexport default SidebarSection","import React from 'react'\nimport classNames from \"classnames\";\n\nimport './index.scss'\n\ninterface ButtonProps {\n  title: string\n  onClick: () => void\n  className?: string\n}\n\nconst Button: React.FC<ButtonProps> = (props: ButtonProps) => {\n  const {\n    title,\n    onClick,\n    className\n  } = props\n\n  const buttonClassNames = classNames(\n    \"button\",\n    {\n      [`${className}`]: className\n    }\n  )\n\n  return (\n    <button className={buttonClassNames} type=\"button\" onClick={onClick}>\n      {title}\n    </button>\n  )\n}\n\nexport default Button","import {productsTypes} from \"./index\";\nimport {\n  IClearProductsAction,\n  IFailureProductsAction,\n  IFilterProductsAction,\n  IProduct,\n  IReceiveProductsAction,\n  IRequestProductsAction\n} from \"./models\";\n\n/////////////<<Fetch products>>/////////////\nconst requestProductsActionCreator = (): IRequestProductsAction => ({\n  type: productsTypes.PRODUCTS_REQUEST\n})\n\nconst receiveProductsActionCreator = (data: IProduct[]): IReceiveProductsAction => ({\n  type: productsTypes.PRODUCTS_RECEIVE,\n  payload: data\n})\n\nconst failureProductsActionCreator = (err: any): IFailureProductsAction => ({\n  type: productsTypes.PRODUCTS_FAILURE,\n  payload: { err }\n})\n/////////////End <<Fetch products>>/////////////\n\nconst setFilterProductsActionCreator = (data: IProduct[]): IFilterProductsAction => ({\n  type: productsTypes.PRODUCTS_FILTER,\n  payload: data\n})\n\n/////////////<<Clear state>>/////////////\nconst clearProductsActionCreator = (): IClearProductsAction => ({\n  type: productsTypes.PRODUCTS_CLEAR\n})\n/////////////End <<Clear state>>/////////////\n\nexport default {\n  requestProductsActionCreator,\n  receiveProductsActionCreator,\n  failureProductsActionCreator,\n  setFilterProductsActionCreator,\n  clearProductsActionCreator\n}","import {IProductsState, TProductsActionTypes} from \"./models\";\nimport {productsTypes} from \"./index\";\n\nconst initialState: IProductsState = {\n  loading: false,\n  products: null,\n  filteredProducts: null,\n  error: null\n}\n\nexport default function productsReducer(state = initialState, action: TProductsActionTypes): IProductsState {\n  switch (action.type) {\n    case productsTypes.PRODUCTS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case productsTypes.PRODUCTS_RECEIVE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        products: action.payload,\n        filteredProducts: action.payload\n      }\n    case productsTypes.PRODUCTS_FILTER:\n      return {\n        ...state,\n        filteredProducts: action.payload\n      }\n    case productsTypes.PRODUCTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.err\n      }\n    case productsTypes.PRODUCTS_CLEAR:\n      return {\n        loading: false,\n        error: null,\n        products: null,\n        filteredProducts: null\n      }\n    default:\n      return state\n  }\n}","import {RootState} from \"../configureStore\";\n\nconst getProductsState = (state: RootState) => ({\n  products: state.Products.products,\n  loadingProducts: state.Products.loading,\n  filteredProducts: state.Products.filteredProducts,\n  error: state.Products.error\n})\n\nexport default {\n  getProductsState\n}","export const MAIN_API = `https://my-json-server.typicode.com/ahmeditaev/AG-test-json-server/`","export enum ECitiesActionTypes {\n  CITIES_REQUEST = 'CITIES_REQUEST',\n  CITIES_RECEIVE = 'CITIES_RECEIVE',\n  CITIES_FAILURE = 'CITIES_FAILURE',\n  CITIES_CLEAR = 'CITIES_CLEAR'\n}","import {productsActions as actions} from './index'\nimport {Dispatch} from \"redux\";\nimport {filterArray, IFilters} from \"../../utils/filterArray\";\nimport {MAIN_API} from \"../../constants/api\";\nimport {RootState} from \"../configureStore\";\n\nconst fetchProducts = () => async (dispatch: Dispatch) => {\n  dispatch(actions.requestProductsActionCreator())\n  try {\n    const res = await fetch(`${MAIN_API}products`)\n    const parsedData = await res.json()\n    setTimeout(() => {\n      dispatch(actions.receiveProductsActionCreator(parsedData))\n    }, 2000)\n  } catch (err) {\n    dispatch(actions.failureProductsActionCreator(err.message))\n  }\n}\n\nconst filterProducts = (filters: IFilters) => (dispatch: Dispatch, getState: () => RootState) => {\n  const state = getState()\n  const {products} = state.Products\n  const filteredProducts = filterArray(products!, filters)\n  dispatch(actions.setFilterProductsActionCreator(filteredProducts))\n}\n\nconst resetFilterProducts = () => (dispatch: Dispatch, getState: () => RootState) => {\n  const state = getState()\n  const {products} = state.Products\n  dispatch(actions.setFilterProductsActionCreator(products!))\n}\n\nexport default {\n  fetchProducts,\n  filterProducts,\n  resetFilterProducts\n}","import {IProduct} from \"../redux/Products/models\";\n\nexport interface IFilters {\n  [key: string]: (value: any) => boolean;\n}\n\nexport function filterArray(array: IProduct[], filters: IFilters) {\n  const filterKeys = Object.keys(filters);\n\n  return array.filter((item: any) => {\n    // validates all filter criteria\n    return filterKeys.every(key => {\n      // ignores non-function predicates\n      if (typeof filters[key] !== 'function') return true;\n      return filters[key](item[key]);\n    });\n  });\n}","import {citiesTypes} from \"./index\";\nimport {\n  ICity, IClearCitiesAction,\n  IFailureCitiesAction,\n  IReceiveCitiesAction,\n  IRequestCitiesAction\n} from \"./models\";\n\n/////////////<<Fetch Cities>>/////////////\nconst requestCitiesActionCreator = (): IRequestCitiesAction => ({\n  type: citiesTypes.CITIES_REQUEST\n})\n\nconst receiveCitiesActionCreator = (data: ICity[]): IReceiveCitiesAction => ({\n  type: citiesTypes.CITIES_RECEIVE,\n  payload: data\n})\n\nconst failureCitiesActionCreator = (err: any): IFailureCitiesAction => ({\n  type: citiesTypes.CITIES_FAILURE,\n  payload: { err }\n})\n/////////////End <<Fetch Cities>>/////////////\n\n/////////////<<Clear state>>/////////////\nconst clearCitiesActionCreator = (): IClearCitiesAction => ({\n  type: citiesTypes.CITIES_CLEAR\n})\n/////////////End <<Clear state>>/////////////\n\nexport default {\n  requestCitiesActionCreator,\n  receiveCitiesActionCreator,\n  failureCitiesActionCreator,\n  clearCitiesActionCreator\n}","import {ICitiesState, TCitiesActionTypes} from \"./models\";\nimport {citiesTypes} from \"./index\";\n\nconst initialState: ICitiesState = {\n  loading: false,\n  cities: null,\n  error: null\n}\n\nexport default function citiesReducer(state = initialState, action: TCitiesActionTypes): ICitiesState {\n  switch (action.type) {\n    case citiesTypes.CITIES_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case citiesTypes.CITIES_RECEIVE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        cities: action.payload\n      }\n    case citiesTypes.CITIES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      }\n    case citiesTypes.CITIES_CLEAR:\n      return {\n        loading: false,\n        error: null,\n        cities: null,\n      }\n    default:\n      return state\n  }\n}","import {RootState} from \"../configureStore\";\n\nconst getCitiesState = (state: RootState) => ({\n  cities: state.Cities.cities,\n  loadingCities: state.Cities.loading,\n})\n\nexport default {\n  getCitiesState\n}","export enum ECategoriesActionTypes {\n  CATEGORIES_REQUEST = 'CATEGORIES_REQUEST',\n  CATEGORIES_RECEIVE = 'CATEGORIES_RECEIVE',\n  CATEGORIES_FAILURE = 'CATEGORIES_FAILURE',\n  CATEGORIES_CLEAR = 'CATEGORIES_CLEAR'\n}","import {Dispatch} from \"redux\";\nimport {citiesActions as actions} from \"./index\";\nimport {MAIN_API} from \"../../constants/api\";\n\nconst fetchCities = () => async (dispatch: Dispatch) => {\n  dispatch(actions.requestCitiesActionCreator())\n  try {\n    const res = await fetch(`${MAIN_API}cities`)\n    const parsedData = await res.json()\n    setTimeout(() => {\n      dispatch(actions.receiveCitiesActionCreator(parsedData))\n    }, 2000)\n  } catch (err) {\n    dispatch(actions.failureCitiesActionCreator(err))\n  }\n}\n\n\nexport default {\n  fetchCities\n}","import {categoriesTypes} from \"./index\";\nimport {\n  ICategory,\n  IRequestCategoriesAction,\n  IReceiveCategoriesAction,\n  IFailureCategoriesAction,\n  IClearCategoriesAction,\n} from \"./models\";\n\n/////////////<<Fetch Categories>>/////////////\nconst requestCategoriesActionCreator = (): IRequestCategoriesAction => ({\n  type: categoriesTypes.CATEGORIES_REQUEST\n})\n\nconst receiveCategoriesActionCreator = (data: ICategory[]): IReceiveCategoriesAction => ({\n  type: categoriesTypes.CATEGORIES_RECEIVE,\n  payload: data\n})\n\nconst failureCategoriesActionCreator = (err: any): IFailureCategoriesAction => ({\n  type: categoriesTypes.CATEGORIES_FAILURE,\n  payload: {err}\n})\n/////////////End <<Fetch Categories>>/////////////\n\n/////////////<<Clear state>>/////////////\nconst clearCategoriesActionCreator = (): IClearCategoriesAction => ({\n  type: categoriesTypes.CATEGORIES_CLEAR\n})\n/////////////End <<Clear state>>/////////////\n\nexport default {\n  requestCategoriesActionCreator,\n  receiveCategoriesActionCreator,\n  failureCategoriesActionCreator,\n  clearCategoriesActionCreator\n}","import {ICategoriesState, TCategoriesActionTypes} from \"./models\";\nimport {categoriesTypes} from \"./index\";\n\nconst initialState: ICategoriesState = {\n  loading: false,\n  categories: null,\n  error: null\n}\n\nexport default function categoriesReducer(state = initialState, action: TCategoriesActionTypes): ICategoriesState {\n  switch (action.type) {\n    case categoriesTypes.CATEGORIES_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case categoriesTypes.CATEGORIES_RECEIVE:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        categories: action.payload\n      }\n    case categoriesTypes.CATEGORIES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error\n      }\n    case categoriesTypes.CATEGORIES_CLEAR:\n      return {\n        loading: false,\n        error: null,\n        categories: null\n      }\n    default:\n      return state\n  }\n}","import {RootState} from \"../configureStore\";\n\nconst getCategoriesState = (state: RootState) => ({\n  categories: state.Categories.categories,\n  loadingCategories: state.Categories.loading,\n})\n\nexport default {\n  getCategoriesState\n}","export enum EVisibilityFilterActionTypes {\n  CITY_FILTER_CHANGE = 'CITY_FILTER_CHANGE',\n  CATEGORY_FILTER_CHANGE = 'CATEGORY_FILTER_CHANGE',\n  PRICE_FILTER_CHANGE = 'PRICE_FILTER_CHANGE',\n  FILTER_CLEAR = 'FILTER_CLEAR',\n}","import {Dispatch, Store} from \"redux\";\nimport {categoriesActions as actions} from \"./index\";\nimport {MAIN_API} from \"../../constants/api\";\n\nconst fetchCategories = () => async (dispatch: Dispatch) => {\n  dispatch(actions.requestCategoriesActionCreator())\n  try {\n    const res = await fetch(`${MAIN_API}categories`)\n    const parsedData = await res.json()\n    setTimeout(() => {\n      dispatch(actions.receiveCategoriesActionCreator(parsedData))\n    }, 2000)\n  } catch (err) {\n    dispatch(actions.failureCategoriesActionCreator(err))\n  }\n}\n\nexport default {\n  fetchCategories\n}","import {visibilityFilterTypes} from \"./index\";\nimport {\n  IVisibilityFilterState,\n  IChangeCityFilterAction,\n  IChangeCategoryFilterAction,\n  IChangePriceFilterAction,\n  IClearFilterAction\n} from \"./models\";\n\nconst changeCityFilterActionCreator = (data: IVisibilityFilterState[\"city\"]): IChangeCityFilterAction => ({\n  type: visibilityFilterTypes.CITY_FILTER_CHANGE,\n  payload: data\n})\n\nconst changeCategoryFilterActionCreator = (data: IVisibilityFilterState[\"category\"]): IChangeCategoryFilterAction => ({\n  type: visibilityFilterTypes.CATEGORY_FILTER_CHANGE,\n  payload: data\n})\n\nconst changePriceFilterActionCreator = (data: IVisibilityFilterState[\"price\"]): IChangePriceFilterAction => ({\n  type: visibilityFilterTypes.PRICE_FILTER_CHANGE,\n  payload: data\n})\n\nconst clearFilterActionCreator = (): IClearFilterAction => ({\n  type: visibilityFilterTypes.FILTER_CLEAR\n})\n\nexport default {\n  changeCityFilterActionCreator,\n  changeCategoryFilterActionCreator,\n  changePriceFilterActionCreator,\n  clearFilterActionCreator\n}","import {IVisibilityFilterState, TVisibilityFilterTypes} from \"./models\";\nimport {visibilityFilterTypes} from \"./index\";\n\nconst initialState: IVisibilityFilterState = {\n  city: null,\n  category: [],\n  price: null\n}\n\nexport default function visibilityFilterReducer(state = initialState, action: TVisibilityFilterTypes): IVisibilityFilterState {\n  switch (action.type) {\n    case visibilityFilterTypes.CITY_FILTER_CHANGE:\n      return {\n        ...state,\n        city: action.payload\n      }\n    case visibilityFilterTypes.CATEGORY_FILTER_CHANGE:\n      return {\n        ...state,\n        category: action.payload\n      }\n    case visibilityFilterTypes.PRICE_FILTER_CHANGE:\n      return {\n        ...state,\n        price: action.payload\n      }\n    case visibilityFilterTypes.FILTER_CLEAR:\n      return {\n        city: null,\n        category: [],\n        price: null\n      }\n    default:\n      return state\n  }\n}","import {RootState} from \"../configureStore\";\n\nconst getVisibilityFilterState = (state: RootState) => ({\n  selectedCity: state.VisibilityFilter.city,\n  selectedPriceRange: state.VisibilityFilter.price,\n  selectedCategories: state.VisibilityFilter.category\n})\n\nexport default {\n  getVisibilityFilterState\n}","import {Dispatch} from \"redux\";\nimport {visibilityFilterActions as actions} from \"./index\";\nimport {ValueType} from \"react-select\";\nimport {OptionValues} from \"../../kit/components/select\";\nimport {ICityFilterState, IPriceFilterState} from \"./models\";\nimport {RootState} from \"../configureStore\";\n\nconst onChangeCityFilter = (option: ValueType<OptionValues, boolean>) => (dispatch: Dispatch) => {\n  const selectedOption = (option as OptionValues)\n\n  const value: ICityFilterState = {\n    id: selectedOption.value,\n    name: selectedOption.label\n  }\n\n  dispatch(actions.changeCityFilterActionCreator(value))\n}\n\nconst onChangeCategoryFilter = (value: number) => (dispatch: Dispatch, getState: () => RootState) => {\n  const state = getState()\n  const {category: selectedCategories} = state.VisibilityFilter\n  const newSetOfSelectedCategories = new Set(selectedCategories)\n\n  if (newSetOfSelectedCategories.has(value)) {\n    newSetOfSelectedCategories.delete(value);\n    dispatch(actions.changeCategoryFilterActionCreator(Array.from(newSetOfSelectedCategories) as number[]))\n  } else {\n    newSetOfSelectedCategories.add(value);\n    dispatch(actions.changeCategoryFilterActionCreator(Array.from(newSetOfSelectedCategories) as number[]))\n  }\n\n}\n\nconst onChangePriceFilter = (data: IPriceFilterState) => (dispatch: Dispatch) => {\n  dispatch(actions.changePriceFilterActionCreator(data))\n}\n\nconst clearVisibilityFilter = () => (dispatch: Dispatch) => {\n  dispatch(actions.clearFilterActionCreator())\n}\n\nexport default {\n  onChangeCityFilter,\n  onChangeCategoryFilter,\n  onChangePriceFilter,\n  clearVisibilityFilter\n}","export const transformValueToOptionValue = (item: {id: number, name: string}) => ({\n  value: item.id,\n  label: item.name\n})","export default __webpack_public_path__ + \"static/media/check-icon.25e4663b.svg\";","import styled from \"styled-components\";\nimport checkIcon from \"../../shared/icons/check-icon.svg\";\n\nconst defaultBorderColor: string = '#d5d7d8'\nconst activeBorderColor: string = '#1cb8ff'\n\nexport const StyledCheckbox = styled.span<{ isChecked: boolean }>`\n  border: 1px solid ${props => props.isChecked ? activeBorderColor : defaultBorderColor};\n\n  ::after {\n    background: ${props => props.isChecked ? `url(${checkIcon}) center center no-repeat` : 'unset'};\n  }\n`","import React from 'react'\nimport { StyledCheckbox } from './styledCheckbox'\n\nimport './index.scss'\n\ninterface CheckboxProps {\n  id: string\n  isChecked: boolean\n  label: string\n  numberValue?: number\n  onChange: () => void\n}\n\nconst Checkbox: React.FC<CheckboxProps> = (props: CheckboxProps) => {\n  const {\n    id,\n    isChecked,\n    label,\n    numberValue,\n    onChange,\n  } = props\n\n  return (\n    <div className='checkbox-wrap'>\n      <input\n        id={id}\n        type=\"checkbox\"\n        checked={isChecked}\n        onChange={onChange}\n      />\n      <label className='checkbox' htmlFor={id}>\n        <StyledCheckbox isChecked={isChecked} className=\"checkbox__icon\" />\n        <span className=\"checkbox__label\">{label}</span>\n        <span className=\"checkbox__count\">({numberValue})</span>\n      </label>\n    </div>\n  )\n}\n\nexport default Checkbox","import {applyMiddleware, combineReducers, compose, createStore, Reducer} from \"redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport {reducer as Products} from './Products'\nimport {reducer as Cities} from './Cities'\nimport {reducer as Categories} from './Categories'\nimport {reducer as VisibilityFilter} from './Filters'\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport storage from 'redux-persist/lib/storage';\nimport {IProductsState} from \"./Products/models\";\nimport {ICitiesState} from \"./Cities/models\";\nimport {ICategoriesState} from \"./Categories/models\";\nimport {IVisibilityFilterState} from \"./Filters/models\";\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\n\nexport interface RootState {\n  Products: IProductsState,\n  Cities: ICitiesState,\n  Categories: ICategoriesState\n  VisibilityFilter: IVisibilityFilterState\n}\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\n\nconst persistConfig: any = {\n  key: \"root\",\n  storage\n}\n\nconst reducers: Reducer = combineReducers({\n  Products,\n  Cities,\n  Categories,\n  VisibilityFilter\n})\n\nconst middlewareEnhancer = applyMiddleware(thunk)\n\nconst composedEnhancer = compose(middlewareEnhancer)\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const store = createStore(persistedReducer, composeWithDevTools(composedEnhancer))\n\nexport const persistor = persistStore(store)","import React from 'react'\nimport {ICategory} from \"../../../redux/Categories/models\";\nimport Checkbox from \"../checkbox\";\nimport {IProduct} from \"../../../redux/Products/models\";\nimport {useDispatch} from \"react-redux\";\nimport {visibilityFilterOperations, visibilityFilterSelector} from \"../../../redux/Filters\";\nimport {useTypedSelector} from \"../../../redux/configureStore\";\nimport {categoriesSelector} from \"../../../redux/Categories\";\nimport {productsSelector} from \"../../../redux/Products\";\n\nimport './index.scss'\n\nconst CategoryList: React.FC = () => {\n  const categoriesState = useTypedSelector(categoriesSelector.getCategoriesState)\n  const productsState = useTypedSelector(productsSelector.getProductsState)\n  const visibilityFilterState = useTypedSelector(visibilityFilterSelector.getVisibilityFilterState)\n\n  const {products} = productsState\n  const {categories} = categoriesState\n  const {selectedCategories} = visibilityFilterState\n\n  const {onChangeCategoryFilter} = visibilityFilterOperations\n\n  const dispatch = useDispatch()\n\n  if (!categories || categories.length === 0) {\n    return null\n  }\n\n  const handleChangeCategories = (value: number) => () => dispatch(onChangeCategoryFilter(value))\n  return (\n    <ul className=\"category-list\">\n      {categories.map((item: ICategory, idx: number) => (\n        <li key={idx} className=\"category-list__item\">\n          <Checkbox\n            id={item.id.toString()}\n            isChecked={selectedCategories.includes(item.id)}\n            label={item.name}\n            numberValue={products!.filter((product: IProduct) => product.category === item.id).length}\n            onChange={handleChangeCategories(item.id)}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default CategoryList","export default __webpack_public_path__ + \"static/media/sad-icon.978076cf.svg\";","import React from 'react'\nimport sadIcon from './../../shared/icons/sad-icon.svg'\n\nimport './index.scss'\n\nconst NoDataFound: React.FC = () => {\n  return (\n    <div className=\"no-data-wrap\">\n      <img width=\"150\" height=\"150\" src={sadIcon} alt=\"No data found\"/>\n      <p>No data found</p>\n    </div>\n  )\n}\n\nexport default NoDataFound","import React, {useEffect} from 'react';\nimport CardItem from \"./../kit/components/card-item\";\nimport CustomSelect, {OptionValues} from \"./../kit/components/select\";\nimport MultiRangeSlider from \"./../kit/components/multi-range-slider\";\nimport SidebarSection from '../kit/components/sidebar-section';\nimport Button from '../kit/components/button';\nimport {OptionsType, ValueType} from \"react-select\";\nimport {useDispatch} from \"react-redux\";\nimport {productsOperations} from '../redux/Products'\nimport {citiesOperations} from \"../redux/Cities\";\nimport {IProduct} from \"../redux/Products/models\"\nimport {categoriesOperations} from \"../redux/Categories\";\nimport {visibilityFilterOperations} from \"../redux/Filters\";\nimport {transformValueToOptionValue} from \"../utils/transformValueToOptionValue\";\nimport CategoryList from '../kit/components/category-list';\nimport {ICategory} from \"../redux/Categories/models\";\nimport {IFilters} from \"../utils/filterArray\";\nimport NoDataFound from '../kit/components/no-data-found';\nimport {useTypedSelector} from \"../redux/configureStore\";\nimport {productsSelector} from \"../redux/Products\";\nimport {citiesSelector} from \"../redux/Cities\";\nimport {categoriesSelector} from \"../redux/Categories\";\nimport {visibilityFilterSelector} from \"../redux/Filters\";\nimport {ICity} from \"../redux/Cities/models\";\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const productsState = useTypedSelector(productsSelector.getProductsState)\n  const citiesState = useTypedSelector(citiesSelector.getCitiesState)\n  const categoriesState = useTypedSelector(categoriesSelector.getCategoriesState)\n  const visibilityFilterState = useTypedSelector(visibilityFilterSelector.getVisibilityFilterState)\n\n  const {fetchProducts, filterProducts, resetFilterProducts} = productsOperations\n  const {fetchCities} = citiesOperations\n  const {fetchCategories} = categoriesOperations\n  const {onChangeCityFilter, onChangePriceFilter, clearVisibilityFilter} = visibilityFilterOperations\n\n  const {products, loadingProducts, filteredProducts, error} = productsState\n  const {cities, loadingCities} = citiesState\n  const {categories, loadingCategories} = categoriesState\n  const {selectedCity, selectedPriceRange, selectedCategories} = visibilityFilterState\n\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    !products && dispatch(fetchProducts())\n    !cities && dispatch(fetchCities())\n    !categories && dispatch(fetchCategories())\n  }, [])\n\n  if (loadingProducts || loadingCities || loadingCategories) {\n    return <div className=\"spinner\" />\n  }\n\n  if (!products || products.length === 0) {\n    return (\n      <div>\n        <p>No data</p>\n        <p>{error || ''}</p>\n      </div>\n    )\n  }\n\n  const options: OptionsType<OptionValues> = cities && !!cities.length ? cities.map(transformValueToOptionValue) : []\n  const availablePrices = products.map((item: IProduct) => item.price)\n  const defaultPriceRange = {\n    min: Math.min(...availablePrices),\n    max: Math.max(...availablePrices)\n  }\n\n  const handleFilterProducts = () => {\n    const currentMinPrice = selectedPriceRange ? selectedPriceRange.min : defaultPriceRange.min\n    const currentMaxPrice = selectedPriceRange ? selectedPriceRange.max : defaultPriceRange.max\n\n    const collectedFilters: IFilters = {\n      price: (price: number) => price >= currentMinPrice && price <= currentMaxPrice,\n      city: (city: number) => selectedCity ? [selectedCity.id].includes(city) : true,\n      category: (category: number) => !!selectedCategories.length ?[...selectedCategories].includes(category) : true\n    }\n    dispatch(filterProducts(collectedFilters))\n  }\n\n  const handleResetFilters = () => {\n    dispatch(clearVisibilityFilter())\n    dispatch(resetFilterProducts())\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"sidebar\">\n            <SidebarSection title=\"City\">\n              <CustomSelect\n                value={selectedCity ? transformValueToOptionValue(selectedCity) : null}\n                options={options}\n                onChange={(option: ValueType<OptionValues, boolean>) => dispatch(onChangeCityFilter(option))}\n              />\n            </SidebarSection>\n            <SidebarSection title=\"Categories\">\n              <CategoryList />\n            </SidebarSection>\n            <SidebarSection title=\"Price\">\n              <div className=\"price-wrap\">\n                <MultiRangeSlider\n                  currentRange={selectedPriceRange || defaultPriceRange}\n                  minValue={defaultPriceRange.min}\n                  maxValue={defaultPriceRange.max}\n                  onChange={(min, max) => dispatch(onChangePriceFilter({min, max}))}\n                />\n                <Button\n                  className=\"filter-button\"\n                  title=\"Filter\"\n                  onClick={handleFilterProducts}\n                />\n              </div>\n              <Button\n                className=\"reset-button\"\n                title=\"Reset filter\"\n                onClick={handleResetFilters}\n              />\n            </SidebarSection>\n          </div>\n          <div className=\"main\">\n            <div className=\"card-list\">\n              {filteredProducts && !!filteredProducts.length ? filteredProducts.map((item: IProduct, idx: number) => {\n                const findCategoryById = categories && !!categories.length ?\n                  categories.find((category: ICategory) => item.category === category.id) : null\n\n                const findCityById = cities && !!cities.length ?\n                  cities.find((city: ICity) => item.city === city.id) : null\n\n                return (\n                  <CardItem\n                    key={idx}\n                    city={findCityById ? findCityById.name : ''}\n                    title={item.name}\n                    category={findCategoryById ? findCategoryById.name : ''}\n                    price={item.price}\n                  />\n                )\n              }) : <NoDataFound/>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport {Provider} from \"react-redux\";\nimport {store, persistor} from \"./redux/configureStore\";\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.scss';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}